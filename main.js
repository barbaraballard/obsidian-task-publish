/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var T=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var $=(p,t)=>{for(var e in t)T(p,e,{get:t[e],enumerable:!0})},E=(p,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of N(t))!I.call(p,n)&&n!==e&&T(p,n,{get:()=>t[n],enumerable:!(s=D(t,n))||s.enumerable});return p};var C=p=>E(T({},"__esModule",{value:!0}),p);var F={};$(F,{default:()=>y});module.exports=C(F);var d=require("obsidian");var x={publishPagePath:"Daily Tasks.md",periodicNotesFolder:"Daily Notes",syncInterval:60,pagePassword:"",netlifySiteName:"",netlifyToken:"",lastSync:0};var h=class{constructor(t,e){this.app=t,this.settings=e}async processTaskQueries(t){let e=/```tasks\n([\s\S]*?)\n```/g,s=t,n;for(;(n=e.exec(t))!==null;){let i=n[1],o=await this.executeTaskQuery(i),a=this.renderTasksAsHtml(o,i);s=s.replace(n[0],a)}return s}async executeTaskQuery(t){let e=await this.getAllTasks();return this.filterTasks(e,t)}async getAllTasks(){let t=[],e=this.app.vault.getMarkdownFiles();for(let s of e){let n=await this.app.vault.read(s),i=this.extractTasksFromContent(n,s.path);t.push(...i)}return t}extractTasksFromContent(t,e){let s=[];return t.split(`
`).forEach((i,o)=>{let a=i.match(/^(\s*)-\s*\[([ x])\]\s*(.+)$/);if(a){let[,l,r,c]=a,g=r==="x",k=this.extractPriority(c),w=this.extractDate(c,"\u{1F4C5}"),b=this.extractDate(c,"\u23F3"),v=this.extractDate(c,"\u{1F6EB}"),S={id:`${e}:${o}`,text:this.cleanTaskText(c),completed:g,priority:k,dueDate:w,scheduledDate:b,startDate:v,filePath:e,lineNumber:o};s.push(S)}}),s}extractPriority(t){let e=t.match(/[⏫🔺🔼🔽]/);if(!e)return"none";switch(e[0]){case"\u23EB":return"highest";case"\u{1F53A}":return"high";case"\u{1F53C}":return"medium";case"\u{1F53D}":return"low";default:return"none"}}extractDate(t,e){let s=new RegExp(`${e}\\s*(\\d{4}-\\d{2}-\\d{2})`),n=t.match(s);return n?n[1]:void 0}cleanTaskText(t){return t.replace(/[⏫🔺🔼🔽]/g,"").replace(/📅\s*\d{4}-\d{2}-\d{2}/g,"").replace(/⏳\s*\d{4}-\d{2}-\d{2}/g,"").replace(/🛫\s*\d{4}-\d{2}-\d{2}/g,"").trim()}filterTasks(t,e){let s=new Date().toISOString().split("T")[0],n=new Date(Date.now()+24*60*60*1e3).toISOString().split("T")[0];return t.filter(i=>{let o=e.toLowerCase().split(`
`).map(a=>a.trim());for(let a of o){if(a.includes("not done")&&i.completed||a.includes("done today")&&(!i.completed||!this.isCompletedToday(i))||a.includes("starts before tomorrow")&&i.startDate&&i.startDate>=n||a.includes("due on or before tomorrow")&&i.dueDate&&i.dueDate>n||a.includes("scheduled before tomorrow")&&i.scheduledDate&&i.scheduledDate>=n||a.includes("priority is above medium")&&!["high","highest"].includes(i.priority)||a.includes("priority is medium")&&i.priority!=="medium"||a.includes("due after today")&&i.dueDate&&i.dueDate<=s)return!1;if(a.includes("due within 3 days")&&i.dueDate){let l=new Date(Date.now()+2592e5).toISOString().split("T")[0];if(i.dueDate>l)return!1}}return!0})}isCompletedToday(t){return t.completed}renderTasksAsHtml(t,e){let s=e.includes("short mode"),n=e.includes("hide task count"),i='<div class="task-group">';return n||(i+=`<div class="task-count">${t.length} tasks</div>`),t.forEach(o=>{let a=o.priority!=="none"?`priority-${o.priority}`:"",l=o.completed?"completed":"";i+=`
                <div class="task-item ${a} ${l}" data-task-id="${o.id}">
                    <input type="checkbox" ${o.completed?"checked":""} onchange="toggleTask('${o.id}')">
                    <span class="task-text">${o.text}</span>
                    ${s?"":this.renderTaskMetadata(o)}
                    <div class="task-actions">
                        <button onclick="postponeTask('${o.id}', 1)">+1d</button>
                        <button onclick="postponeTask('${o.id}', 7)">+1w</button>
                    </div>
                </div>
            `}),i+="</div>",i}renderTaskMetadata(t){let e="";return t.dueDate&&(e+=`<span class="due-date">\u{1F4C5} ${t.dueDate}</span>`),t.scheduledDate&&(e+=`<span class="scheduled-date">\u23F3 ${t.scheduledDate}</span>`),t.startDate&&(e+=`<span class="start-date">\u{1F6EB} ${t.startDate}</span>`),t.priority!=="none"&&(e+=`<span class="priority">${this.getPrioritySymbol(t.priority)}</span>`),e?`<div class="task-metadata">${e}</div>`:""}getPrioritySymbol(t){switch(t){case"highest":return"\u23EB";case"high":return"\u{1F53A}";case"medium":return"\u{1F53C}";case"low":return"\u{1F53D}";default:return""}}};var m=class{constructor(t){this.settings=t}async publish(t){let e=this.generateHtmlPage(t);if(this.settings.netlifySiteName&&this.settings.netlifyToken)await this.publishToNetlify(e);else throw console.log("HTML Content:",e),new Error("Netlify configuration required for publishing")}generateHtmlPage(t){let e=this.settings.pagePassword?this.generatePasswordProtection():"";return`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Tasks</title>
    <style>
        ${this.getStyles()}
    </style>
</head>
<body>
    ${e}
    <div id="main-content" ${this.settings.pagePassword?'style="display:none"':""}>
        <div class="container">
            <h1>My Tasks</h1>
            <div class="last-updated">Last updated: ${new Date().toLocaleString()}</div>
            
            <div class="task-input-section">
                <h3>Add New Task</h3>
                <input type="text" id="new-task-input" placeholder="Enter a new task..." />
                <button onclick="addNewTask()">Add Task</button>
            </div>
            
            <div class="content">
                ${t}
            </div>
        </div>
    </div>
    
    <script>
        ${this.getJavaScript()}
    <\/script>
</body>
</html>`}generatePasswordProtection(){return`
        <div id="password-prompt" class="password-screen">
            <div class="password-container">
                <h2>Enter Password</h2>
                <input type="password" id="password-input" placeholder="Password" />
                <button onclick="checkPassword()">Enter</button>
            </div>
        </div>`}getStyles(){return`
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            min-height: 100vh;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        
        .last-updated {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 30px;
        }
        
        .task-input-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        
        .task-input-section h3 {
            margin-bottom: 15px;
            color: #2c3e50;
        }
        
        #new-task-input {
            width: 70%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        button {
            padding: 10px 20px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }
        
        button:hover {
            background: #2980b9;
        }
        
        .task-group {
            margin-bottom: 30px;
        }
        
        .task-count {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 10px;
        }
        
        .task-item {
            display: flex;
            align-items: center;
            padding: 12px;
            border: 1px solid #e1e5e9;
            border-radius: 6px;
            margin-bottom: 8px;
            background: white;
            transition: all 0.2s ease;
        }
        
        .task-item:hover {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .task-item.completed {
            opacity: 0.6;
            background: #f8f9fa;
        }
        
        .task-item.completed .task-text {
            text-decoration: line-through;
        }
        
        .task-item input[type="checkbox"] {
            margin-right: 12px;
            transform: scale(1.2);
        }
        
        .task-text {
            flex: 1;
            font-size: 16px;
        }
        
        .task-metadata {
            display: flex;
            gap: 10px;
            margin-left: 10px;
            font-size: 0.85em;
        }
        
        .task-metadata span {
            background: #e9ecef;
            padding: 2px 6px;
            border-radius: 3px;
        }
        
        .due-date { background: #fff3cd; }
        .scheduled-date { background: #d1ecf1; }
        .start-date { background: #d4edda; }
        .priority { background: #f8d7da; }
        
        .task-actions {
            display: flex;
            gap: 5px;
            margin-left: 10px;
        }
        
        .task-actions button {
            padding: 4px 8px;
            font-size: 0.8em;
            margin: 0;
        }
        
        .priority-highest { border-left: 4px solid #dc3545; }
        .priority-high { border-left: 4px solid #fd7e14; }
        .priority-medium { border-left: 4px solid #ffc107; }
        .priority-low { border-left: 4px solid #6c757d; }
        
        .password-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .password-container {
            background: white;
            padding: 40px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .password-container h2 {
            margin-bottom: 20px;
            color: #2c3e50;
        }
        
        .password-container input {
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 20px;
            width: 200px;
            font-size: 16px;
        }
        
        @media (max-width: 600px) {
            .container {
                padding: 10px;
            }
            
            #new-task-input {
                width: 100%;
                margin-bottom: 10px;
            }
            
            button {
                margin-left: 0;
                width: 100%;
            }
            
            .task-item {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .task-actions {
                margin-left: 0;
                margin-top: 10px;
            }
        }`}getJavaScript(){return`
        let tasks = [];
        
        function checkPassword() {
            const input = document.getElementById('password-input');
            const enteredPassword = input.value;
            const correctPassword = '${this.settings.pagePassword}';
            
            if (enteredPassword === correctPassword) {
                document.getElementById('password-prompt').style.display = 'none';
                document.getElementById('main-content').style.display = 'block';
            } else {
                alert('Incorrect password');
                input.value = '';
            }
        }
        
        function toggleTask(taskId) {
            // Send update to Obsidian via API call
            fetch('/api/toggle-task', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ taskId: taskId })
            }).catch(err => {
                console.log('Task toggle will sync on next Obsidian startup');
                // Store locally for next sync
                localStorage.setItem('pendingToggle_' + taskId, 'true');
            });
        }
        
        function postponeTask(taskId, days) {
            const newDate = new Date();
            newDate.setDate(newDate.getDate() + days);
            const dateString = newDate.toISOString().split('T')[0];
            
            fetch('/api/postpone-task', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ taskId: taskId, newDate: dateString })
            }).catch(err => {
                console.log('Task postpone will sync on next Obsidian startup');
                localStorage.setItem('pendingPostpone_' + taskId, dateString);
            });
        }
        
        function addNewTask() {
            const input = document.getElementById('new-task-input');
            const taskText = input.value.trim();
            
            if (taskText) {
                fetch('/api/add-task', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ text: taskText })
                }).then(() => {
                    input.value = '';
                    alert('Task added! Will appear after next sync.');
                }).catch(err => {
                    console.log('Task will be added on next Obsidian startup');
                    localStorage.setItem('pendingTask_' + Date.now(), taskText);
                    input.value = '';
                    alert('Task queued for next sync!');
                });
            }
        }
        
        // Handle Enter key in password input
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('password-input');
            if (passwordInput) {
                passwordInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        checkPassword();
                    }
                });
            }
            
            const taskInput = document.getElementById('new-task-input');
            if (taskInput) {
                taskInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        addNewTask();
                    }
                });
            }
        });`}async publishToNetlify(t){let e=this.settings.netlifySiteName,s=this.settings.netlifyToken,n=new FormData,i=new Blob([t],{type:"text/html"});n.append("index.html",i);let o=await fetch(`https://api.netlify.com/api/v1/sites/${e}/deploys`,{method:"POST",headers:{Authorization:`Bearer ${s}`},body:n});if(!o.ok)throw new Error(`Netlify deployment failed: ${o.statusText}`);let a=await o.json();console.log("Deployed to:",a.deploy_ssl_url)}};var u=require("obsidian"),f=class{constructor(t,e){this.app=t,this.settings=e}async sync(){try{await this.processPendingWebChanges(),this.settings.lastSync=Date.now(),console.log("Task sync completed successfully")}catch(t){throw console.error("Error during task sync:",t),t}}async processPendingWebChanges(){let t=this.getPendingToggles(),e=this.getPendingPostpones(),s=this.getPendingTasks();for(let[n,i]of Object.entries(t))await this.toggleTaskInVault(n);for(let[n,i]of Object.entries(e))await this.postponeTaskInVault(n,i);for(let[n,i]of Object.entries(s))await this.addTaskToPeriodicNote(i);this.clearProcessedPendingChanges()}async toggleTaskInVault(t){let[e,s]=t.split(":"),n=this.app.vault.getAbstractFileByPath(e);if(!n||!(n instanceof u.TFile)){console.warn(`File not found: ${e}`);return}let o=(await this.app.vault.read(n)).split(`
`),a=parseInt(s);if(a>=0&&a<o.length){let r=o[a].match(/^(\s*)-\s*\[([ x])\]\s*(.+)$/);if(r){let[,c,g,k]=r,w=g==="x"?" ":"x";o[a]=`${c}- [${w}] ${k}`;let b=o.join(`
`);await this.app.vault.modify(n,b),console.log(`Toggled task: ${t}`)}}}async postponeTaskInVault(t,e){let[s,n]=t.split(":"),i=this.app.vault.getAbstractFileByPath(s);if(!i||!(i instanceof u.TFile)){console.warn(`File not found: ${s}`);return}let a=(await this.app.vault.read(i)).split(`
`),l=parseInt(n);if(l>=0&&l<a.length){let r=a[l];r=r.replace(/📅\s*\d{4}-\d{2}-\d{2}/,"").trim(),r.endsWith("]")?r=r.slice(0,-1)+` \u{1F4C5} ${e}]`:r+=` \u{1F4C5} ${e}`,a[l]=r;let c=a.join(`
`);await this.app.vault.modify(i,c),console.log(`Postponed task ${t} to ${e}`)}}async addTaskToPeriodicNote(t){let s=new Date().toISOString().split("T")[0],n=`${s}.md`,i=`${this.settings.periodicNotesFolder}/${n}`,o=this.app.vault.getAbstractFileByPath(i);if(!o||!(o instanceof u.TFile))try{o=await this.app.vault.create(i,this.getDefaultDailyNoteTemplate(s))}catch(a){if(console.error(`Error creating daily note: ${a}`),this.app.vault.getAbstractFileByPath(this.settings.periodicNotesFolder)){let r=this.app.vault.getMarkdownFiles().filter(c=>c.path.startsWith(this.settings.periodicNotesFolder)).sort((c,g)=>g.stat.mtime-c.stat.mtime);if(r.length>0)o=r[0];else throw new Error("No periodic notes found")}else throw new Error("Periodic notes folder not found")}if(o instanceof u.TFile){let a=await this.app.vault.read(o),l=`- [ ] ${t}`,r;a.includes("## Tasks")||a.includes("# Tasks")?r=a.replace(/(## Tasks|# Tasks)/,`$1
${l}`):r=a+`

## Tasks
${l}`,await this.app.vault.modify(o,r),console.log(`Added new task: ${t}`)}}getDefaultDailyNoteTemplate(t){return`# ${t}

## Tasks
- [ ] Review daily tasks

## Notes

`}getPendingToggles(){return{}}getPendingPostpones(){return{}}getPendingTasks(){return{}}clearProcessedPendingChanges(){console.log("Cleared processed pending changes")}async findModifiedTasks(){let t=[],e=this.app.vault.getMarkdownFiles();for(let s of e)if(s.stat.mtime>this.settings.lastSync){let n=await this.app.vault.read(s);this.containsTasks(n)&&t.push(s.path)}return t}containsTasks(t){return/^[\s]*-\s*\[[ x]\]/m.test(t)}async setupRealTimeSync(){console.log("Real-time sync setup - would implement WebSocket connection")}};var y=class extends d.Plugin{constructor(){super(...arguments);this.settings=x}async onload(){await this.loadSettings(),this.taskProcessor=new h(this.app,this.settings),this.webPublisher=new m(this.settings),this.taskSyncer=new f(this.app,this.settings),this.addRibbonIcon("upload","Publish Tasks",()=>{this.publishTasks()}),this.addCommand({id:"publish-tasks",name:"Publish Tasks",callback:()=>this.publishTasks()}),this.addCommand({id:"sync-tasks",name:"Sync Tasks",callback:()=>this.syncTasks()}),this.addSettingTab(new P(this.app,this)),this.setupAutoSync(),setTimeout(()=>this.syncTasks(),2e3)}onunload(){this.syncInterval&&window.clearInterval(this.syncInterval)}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}async saveSettings(){await this.saveData(this.settings),this.setupAutoSync()}setupAutoSync(){this.syncInterval&&window.clearInterval(this.syncInterval),this.settings.syncInterval>0&&(this.syncInterval=window.setInterval(()=>{this.syncTasks()},this.settings.syncInterval*60*1e3))}async publishTasks(){try{let e=this.app.vault.getAbstractFileByPath(this.settings.publishPagePath);if(!e||!(e instanceof d.TFile)){new d.Notice("Publish page not found. Please check your settings.");return}let s=await this.app.vault.read(e),n=await this.taskProcessor.processTaskQueries(s);await this.webPublisher.publish(n),new d.Notice("Tasks published successfully!")}catch(e){console.error("Error publishing tasks:",e),new d.Notice("Error publishing tasks. Check console for details.")}}async syncTasks(){try{await this.taskSyncer.sync(),new d.Notice("Tasks synced successfully!")}catch(e){console.error("Error syncing tasks:",e),new d.Notice("Error syncing tasks. Check console for details.")}}},P=class extends d.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"TaskPublish Settings"}),new d.Setting(t).setName("Publish Page Path").setDesc("Path to the page containing task queries to publish").addText(e=>e.setPlaceholder("Daily Tasks.md").setValue(this.plugin.settings.publishPagePath).onChange(async s=>{this.plugin.settings.publishPagePath=s,await this.plugin.saveSettings()})),new d.Setting(t).setName("Periodic Notes Folder").setDesc("Folder where new tasks should be added (usually Daily Notes)").addText(e=>e.setPlaceholder("Daily Notes").setValue(this.plugin.settings.periodicNotesFolder).onChange(async s=>{this.plugin.settings.periodicNotesFolder=s,await this.plugin.saveSettings()})),new d.Setting(t).setName("Sync Interval (minutes)").setDesc("How often to sync tasks (0 to disable)").addText(e=>e.setPlaceholder("60").setValue(this.plugin.settings.syncInterval.toString()).onChange(async s=>{let n=parseInt(s);!isNaN(n)&&n>=0&&(this.plugin.settings.syncInterval=n,await this.plugin.saveSettings())})),new d.Setting(t).setName("Page Password/PIN").setDesc("Password or PIN to protect the published page").addText(e=>e.setPlaceholder("Enter password").setValue(this.plugin.settings.pagePassword).onChange(async s=>{this.plugin.settings.pagePassword=s,await this.plugin.saveSettings()})),new d.Setting(t).setName("Netlify Site Name").setDesc("Your Netlify site name (e.g., my-tasks)").addText(e=>e.setPlaceholder("my-tasks").setValue(this.plugin.settings.netlifySiteName).onChange(async s=>{this.plugin.settings.netlifySiteName=s,await this.plugin.saveSettings()})),new d.Setting(t).setName("Netlify Access Token").setDesc("Your Netlify personal access token").addText(e=>e.setPlaceholder("Enter access token").setValue(this.plugin.settings.netlifyToken).onChange(async s=>{this.plugin.settings.netlifyToken=s,await this.plugin.saveSettings()}))}};
